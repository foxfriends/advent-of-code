module io at "trilogy:io" use println, readlines
module str at "trilogy:str" use chomp, chars
module array at "trilogy:array" use length, fold
module iter at "trilogy:iter" use rangex
module tuple at "trilogy:tuple" use fst, snd

rule step('e, '|', 'n)
rule step('e, '|', 's)
rule step('w, '|', 'n)
rule step('w, '|', 's)
rule step('n, '|', 'n)
rule step('s, '|', 's)

rule step('e, '-', 'e)
rule step('w, '-', 'w)
rule step('n, '-', 'e)
rule step('n, '-', 'w)
rule step('s, '-', 'e)
rule step('s, '-', 'w)

rule step('e, '/', 'n)
rule step('w, '/', 's)
rule step('s, '/', 'w)
rule step('n, '/', 'e)

rule step('w, '\\', 'n)
rule step('e, '\\', 's)
rule step('n, '\\', 'w)
rule step('s, '\\', 'e)

rule step(d, '.', d)

func visit 'w x = x | 0bb0001
func visit 'e x = x | 0bb0010
func visit 'n x = x | 0bb0100
func visit 's x = x | 0bb1000

func visited 'w x = (x & 0bb0001) != 0bb0000
func visited 'e x = (x & 0bb0010) != 0bb0000
func visited 'n x = (x & 0bb0100) != 0bb0000
func visited 's x = (x & 0bb1000) != 0bb0000

func move x y 'e = (x+1):y
func move x y 'w = (x-1):y
func move x y 'n = x:(y-1)
func move x y 's = x:(y+1)

proc main!() {
    let grid = [chomp line for line in readlines!()]
    let height = length grid
    let width = str::length (grid.0)
    let puzzle = fold (<>) "" grid

    let energy = [0bb0000 for _ in rangex 0 (height * width)]
    let mut beams = (0:0:'e):unit

    while beams != unit {
        let x:y:d = fst beams
        beams = snd beams

        let index = y * height + x
        if visited d (energy.index) {
            continue
        }

        energy.index visit= d
        let ch = puzzle.index
        for step(^d, ^ch, d2) {
            let x2:y2 = move x y d2
            if x2 >= 0 && y2 >= 0 && x2 < width && y2 < height {
                beams = (x2:y2:d2) : beams
            }
        }
    }

    let mut total = 0
    for bits in energy and is bits != 0bb0000 {
        total += 1
    }
    println!(total)
}
