module io at "trilogy:io" use println, readlines
module str at "trilogy:str" use chomp, chars
module num at "trilogy:num" use max
module array at "trilogy:array" use length, fold
module bits at "trilogy:bits" use zeros, concat
module iter at "trilogy:iter" use rangex
module tuple at "trilogy:tuple" use fst, snd

rule step('e, '|', 'n)
rule step('e, '|', 's)
rule step('w, '|', 'n)
rule step('w, '|', 's)
rule step('n, '|', 'n)
rule step('s, '|', 's)

rule step('e, '-', 'e)
rule step('w, '-', 'w)
rule step('n, '-', 'e)
rule step('n, '-', 'w)
rule step('s, '-', 'e)
rule step('s, '-', 'w)

rule step('e, '/', 'n)
rule step('w, '/', 's)
rule step('s, '/', 'w)
rule step('n, '/', 'e)

rule step('w, '\\', 'n)
rule step('e, '\\', 's)
rule step('n, '\\', 'w)
rule step('s, '\\', 'e)

rule step(d, '.', d)

func visit 'w = 0bb0001
func visit 'e = 0bb0010
func visit 'n = 0bb0100
func visit 's = 0bb1000

func visited d x = (x & (visit d)) != 0bb0000

func move x y 'e = (x+1):y
func move x y 'w = (x-1):y
func move x y 'n = x:(y-1)
func move x y 's = x:(y+1)

func shrex b n = concat (zeros n) b
func write index val energy = energy | (shrex val <| index * 4)
func read index energy = 0bb0000 | (energy <~ (index * 4))

proc main!() {
    let grid = [chomp line for line in readlines!()]
    let height = length grid
    let width = str::length <| grid.0
    let puzzle = fold (<>) "" grid
    let energy_base = [0bb0000 for _ in rangex 0 (height * width)]

    let base_energy = zeros (height * (str::length (grid.0)) * 4)
    let mut best = 0
    for (sx in rangex 0 width and sy:sd in [0:'s, (height-1):'n])
    or (sy in rangex 0 height and sx:sd in [0:'e, (width-1):'w]) {
        println!(sx:sy:sd)
        let mut energy = base_energy
        let mut beams = (sx:sy:sd):unit
        while beams != unit {
            let x:y:d = fst beams
            beams = snd beams
            let index = y * height + x
            if visited d (read index energy) {
                continue
            }

            energy write= index (visit d)
            let ch = puzzle.index
            for step(^d, ^ch, d2) {
                let x2:y2 = move x y d2
                if x2 >= 0 && y2 >= 0 && x2 < width && y2 < height {
                    beams = (x2:y2:d2) : beams
                }
            }
        }
        let mut total = 0
        for offset in rangex 0 (str::length puzzle) and is read offset energy != 0bb0000 {
            total += 1
        }
        best max= total
        println!(best)
    }
    println!(best)
}
