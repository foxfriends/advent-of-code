module io at "trilogy:io" use readlines, println
module num at "trilogy:num" use cast, max
module str at "trilogy:str" use split
module array at "trilogy:array" use map, flatmap, fold
module regex at "trilogy:regex"

const init = {|
    "red" => 0,
    "green" => 0,
    "blue" => 0,
|}

func max_color {| "red" => best, ..cs |} {| 2 => "red", 1 => n, .._ |} = {| "red" => max (cast n) best, ..cs |}
func max_color {| "green" => best, ..cs |} {| 2 => "green", 1 => n, .._ |} = {| "green" => max (cast n) best, ..cs |}
func max_color {| "blue" => best, ..cs |} {| 2 => "blue", 1 => n, .._ |} = {| "blue" => max (cast n) best, ..cs |}

func power {| "red" => r, "green" => g, "blue" => b |} = r * g * b

proc main!() {
    let game_pattern = regex::new "Game (\\d+): (.*)"
    let draw_pattern = regex::new "(\\d+) (green|red|blue)"
    let mut total = 0
    for line in readlines!() {
        let game = game_pattern::matches line
        total += game.2
            |> split "; "
            |> flatmap (
                split ", "
                >> map (draw_pattern::matches)
            )
            |> fold (fn x. max_color x) {| ..init |}
            |> power
    }
    println!(total)
}
