module io at "trilogy:io" use readlines, println
module record at "trilogy:record" use get
module array at "trilogy:array" use map
module str at "trilogy:str"
module iter at "trilogy:iter" use of, enumerate
module num at "trilogy:num"
module regex at "trilogy:regex"
module tuple at "trilogy:tuple" use fst

const symbol_regex = regex::new "[^\\d.]"
const number_regex = regex::new "\\d+"

func symbols str = symbol_regex::all_positions str |> map (get 0 >> fst)
func numbers str = number_regex::all_captures str |> map (get 0)

proc main!() {
    let lines = [str::chomp line for line in readlines!()]
    let symbol_positions = map symbols lines
    let number_captures = map numbers lines

    let mut total = 0
    for i : line in (of number_captures |> enumerate)!() {
        with {
            for number in line {
                if is (
                    row in [i - 1, i, i + 1]
                    and col in symbol_positions . row
                    and is number::start!() - 1 <= col && col <= number::end_!()
                ) {
                    total += num::cast <| number::value!()
                }
            }
        } when 'MIA resume [] else yield
    }
    println!(total)
}
