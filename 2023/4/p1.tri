module io at "trilogy:io" use readlines, println
module regex at "trilogy:regex"
module str at "trilogy:str" use split, chomp
module num at "trilogy:num"
module iter at "trilogy:iter" use map, reduce, filter
module set at "trilogy:set" use intersection, length
module array at "trilogy:array"

const card_regex = regex::new "Card\\s+\\d+:([^|]+)\\|([^|]+)"

func parse_nums numstr = [| num::cast x for x in numstr |> split " " and is x != "" |]
func parse_card card = parse_nums card.1 : parse_nums card.2

proc main!() {
    let total = readlines
        |> map (chomp >> card_regex::matches)
        |> map parse_card
        |> map (fn a:b. intersection a b)
        |> map length
        |> filter ((!=) 0)
        |> map (fn x. 2 ** (x - 1))
        |> reduce (+)
    println!(total)
}
