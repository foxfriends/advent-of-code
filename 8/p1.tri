module io at "trilogy:io" use println, readlines
module str at "trilogy:str" use chomp, chars, slice
module iter at "trilogy:iter" use of, map, collect
module record at "trilogy:record"
module array at "trilogy:array" use length
module tuple at "trilogy:tuple" use fst, snd
module time at "trilogy:time" use instant, fmt_ns

func parse_node line =
    slice 0 3 line : slice 7 3 line : slice 12 3 line

func go 'L' = fst
func go 'R' = snd

proc main!() {
    let [mut directions, ..nodes] = [l for line in readlines!() and l = chomp line and is l != ""];
    let dirs = chars directions
    let graph = of nodes |> map parse_node |> collect record
    let travel = fn d p. go d (graph . p)

    let mut position = "AAA"
    let mut distance = 0
    while position != "ZZZ" {
        let dist = distance % length dirs
        let dir = dirs . dist
        position travel= dir
        distance += 1
    }

    println!(distance)
}
