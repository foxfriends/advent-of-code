module io at "trilogy:io" use println, readlines
module str at "trilogy:str" use chomp, chars, slice
module iter at "trilogy:iter" use of, map, collect
module record at "trilogy:record"
module array at "trilogy:array" use length
module tuple at "trilogy:tuple" use fst, snd

func parse_node line =
    slice 0 3 line : slice 7 3 line : slice 12 3 line

func go 'L' = fst
func go 'R' = snd

func distance _ _ dist dest dest = dist
func distance dirs graph dist dest src = graph . src
    |> go (dirs . (dist % length dirs))
    |> distance dirs graph (dist + 1) dest

proc main!() {
    let [directions, _, ..nodes] = [chomp line for line in readlines!() and is line != ""];
    let dirs = chars directions
    let graph = of nodes |> map parse_node |> collect record
    println!(distance dirs graph 0 "ZZZ" "AAA")
}
