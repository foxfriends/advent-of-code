module io at "trilogy:io" use println, readlines
module str at "trilogy:str" use chomp, chars, slice
module iter at "trilogy:iter" use of, map, collect, filter
module record at "trilogy:record" use keys
module num at "trilogy:num" use lcm
module array at "trilogy:array" use length, push, fold
module tuple at "trilogy:tuple" use fst, snd

func parse_node line =
    slice 0 3 line : slice 7 3 line : slice 12 3 line

func go 'L' = fst
func go 'R' = snd

func is_start _ <> "A" = true
func is_start _ = false

func is_end _ <> "Z" = true
func is_end _ = false

proc cycle!(dirs, graph, start) {
    let travel = fn d p. go d (graph . p)
    let len = length dirs
    let mut buckets = [[] for _ in dirs]
    let mut position = start
    let mut distance = 0
    while true {
        let bucket = buckets . (distance % len)
        if is_end position {
            for [init, cycle] = [dist for ^position:dist in bucket] {
                return cycle - init
            }
        }
        push!(bucket, position : distance)
        position travel= dirs . (distance % len)
        distance += 1
    }
}

proc main!() {
    let [mut directions, ..nodes] = [l for line in readlines!() and l = chomp line and is l != ""];
    let dirs = chars directions
    let graph = of nodes |> map parse_node |> collect record

    let starts = (do() keys graph)
        |> filter is_start
        |> collect array

    let mut total = 0
    let mut memo = []
    let len = length dirs

    let mut cycles = []
    for start in starts {
        push!(cycles, cycle!(dirs, graph, start))
    }
    println!(fold lcm 1 cycles)
}
