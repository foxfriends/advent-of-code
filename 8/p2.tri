module io at "trilogy:io" use println, readlines
module str at "trilogy:str" use chomp, chars, slice
module iter at "trilogy:iter" use of, map, collect, filter
module record at "trilogy:record" use keys
module array at "trilogy:array" use length, all, push
module tuple at "trilogy:tuple" use fst, snd

func parse_node line =
    slice 0 3 line : slice 7 3 line : slice 12 3 line

func go 'L' = fst
func go 'R' = snd

func is_start _ <> "A" = true
func is_start _ = false

func is_end _ <> "Z" = true
func is_end _ = false

proc main!() {
    let [mut directions, _, ..nodes] = [chomp line for line in readlines!() and is line != ""];
    let dirs = chars directions
    let graph = of nodes
        |> map parse_node
        |> collect record
    let travel = fn d p. go d (graph . p)

    let starts = (do() keys graph)
        |> filter is_start
        |> collect array

    let mut total = 0
    let mut memo = []
    for start in starts {
        let mut this_memo = {||}
        let mut position = start
        let mut distance = 0
        while is_end position {
            let dir = dirs . distance
            position travel= dir
            distance = (distance + 1) % length dirs
            this_memo . distance = position
        }
        push!(memo, this_memo)
    }

    println!(total)
}
